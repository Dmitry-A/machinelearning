<#@ template language="C#" linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.ML.CLI.Utilities" #>
//*****************************************************************************************
//*                                                                                       *
//* This is an auto-generated file by Microsoft ML.NET CLI (Command-Line Interface) tool. *
//*                                                                                       *
//*****************************************************************************************

using System;
using System.IO;
using System.Linq;
using Microsoft.ML;
using <#= Namespace #>.Model.DataModels;


namespace <#= Namespace #>.ConsoleApp
{
    class Program
    {
        //Machine Learning model to load and use for predictions
        private const string MODEL_FILEPATH = @"bestModel.onnx";

        //Dataset to use for predictions 
<#if(string.IsNullOrEmpty(TestDataPath)){ #>
        private const string DATA_FILEPATH = @"<#= TrainDataPath #>";
<# } else{ #>
        private const string DATA_FILEPATH = @"<#= TestDataPath #>";
<# } #>

        static void Main(string[] args)
        {
            MLContext mlContext = new MLContext();

			// This code doesn't look like it will in the final version when this issue is resolved
			// https://github.com/dotnet/machinelearning/issues/4335

			// ONNX requries creating an estimator first, then you get a transformer by calling Fit()
			var estimator = mlContext.Transforms.ApplyOnnxModel(GetAbsolutePath(MODEL_FILEPATH));
			
			var dataView = mlContext.Data.LoadFromEnumerable<ModelInput>(new ModelInput[] { });

			// Fit() will check the input schema of the model against the input dataview you're passing in
			var transformer = estimator.Fit(dataView);

			// add a sample row here in CSV format
			var testSample = @"";

			var tempFile = Path.GetTempFileName();
            using (var sw = new StreamWriter(tempFile))
            {
                sw.WriteLine(testSample);
            }

			// run the model
            var transformedValues = transformer.Transform(mlContext.Data.LoadFromTextFile<ModelInput>(tempFile, separatorChar: ','));

			var predictions = mlContext.Data.CreateEnumerable<ModelOutput>(
                transformedValues, reuseRowObject: false);

            Console.WriteLine($"Single Prediction --> Actual value: {predictions.First().Prediction[0]}."); 

            Console.WriteLine("=============== End of process, hit any key to finish ===============");
            Console.ReadKey();
        }

        // Method to load single row of data to try a single prediction
        // You can change this code and create your own sample data here (Hardcoded or from any source)
        private static ModelInput CreateSingleDataSample(MLContext mlContext, string dataFilePath)
        {
            // Read dataset to get a single row for trying a prediction          
            IDataView dataView = mlContext.Data.LoadFromTextFile<ModelInput>(
                                            path: dataFilePath,
                                            hasHeader : <#= HasHeader.ToString().ToLowerInvariant() #>,
                                            separatorChar : '<#= Regex.Escape(Separator.ToString()) #>',
                                            allowQuoting : <#= AllowQuoting.ToString().ToLowerInvariant() #>,
                                            allowSparse: <#= AllowSparse.ToString().ToLowerInvariant() #>);

            // Here (ModelInput object) you could provide new test data, hardcoded or from the end-user application, instead of the row from the file.
            ModelInput sampleForPrediction = mlContext.Data.CreateEnumerable<ModelInput>(dataView, false)
                                                                        .First();
            return sampleForPrediction;
        }

        public static string GetAbsolutePath(string relativePath)
        {
            FileInfo _dataRoot = new FileInfo(typeof(Program).Assembly.Location);
            string assemblyFolderPath = _dataRoot.Directory.FullName;

            string fullPath = Path.Combine(assemblyFolderPath, relativePath);

            return fullPath;
        }
    }
}
<#+
public string TaskType {get;set;}
public string Namespace {get;set;}
public string LabelName {get;set;}
public string TestDataPath {get;set;}
public string TrainDataPath {get;set;}
public char Separator {get;set;}
public bool AllowQuoting {get;set;}
public bool AllowSparse {get;set;}
public bool HasHeader {get;set;}
#>
